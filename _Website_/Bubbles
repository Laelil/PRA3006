<!DOCTYPE html>
<html lang="en">

<style>

.node {
  cursor: pointer;
}

.node:hover {
  stroke: #809fff;
  stroke-width: 1.5px;
}

.node--leaf {
  fill: #f2e5ff;
}


.label {
  font: 14px "Helvetica Neue", Helvetica, Arial, sans-serif;
  text-anchor: middle;
  text-shadow: 0 1px 0 #fff, 1px 0 0 #fff, -1px 0 0 #fff, 0 -1px 0 #fff;
}

.label,
.node--root,
.node--leaf {
  pointer-events: none;
}

</style>

<head>
    <!-- d3 library --> <script src="https://d3js.org/d3.v4.min.js"></script>
    <!-- Stylesheet --> <link rel='stylesheet' href="stylesheet.css">

    <!-- Initialize a global WBK function -->
    <script src="https://cdn.rawgit.com/maxlath/wikidata-sdk/dist/dist/wikibase-sdk.min.js"></script>
    <!-- Initialize a global wdk object using the WBK object -->
    <script src="https://cdn.rawgit.com/maxlath/wikidata-sdk/dist/dist/wikidata-sdk.min.js"></script>
    </script>

    <title>Drug targeting in Post Traumatic Stress Disorder(PTSD)</title>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
</head>

<body>


 <div class="center1">
   
<pre id="output"></pre>



<p id="demo"></p>



<svg width="960" height="960"></svg>
<script src="https://d3js.org/d3.v4.min.js"></script>

<script>



const resultsMapped = resultsSimple.map((result) => ({"name": result.drug.classLabel, "children": result.drug.value.split(",").map((drug)=>({name: drug, size: result.DiseaseCount}))}))
    console.log(resultsMapped)

        var root = {name: "main", children: resultsMapped};

        var nest = JSON.stringify(resultsMapped);
        //document.getElementById('output').innerHTML += nest;

        var svg = d3.select("svg"),
    margin = 20,
    diameter = +svg.attr("width"),
    g = svg.append("g").attr("transform", "translate(" + diameter / 2 + "," + diameter / 2 + ")");

var color = d3.scaleLinear()
    .domain([-1, 5])
    .range(["hsla(239, 100%, 62%, 1))", "hsla(265, 100%, 47%, 0.2)"])
    .interpolate(d3.interpolateHcl);

var pack = d3.pack()
    .size([diameter - margin, diameter - margin])
    .padding(2);

//root = JSON.parse(nest);

  //root = resultsMapped;

  root = d3.hierarchy(root)
      .sum(function(d) { return d.size; })
      .sort(function(a, b) { return b.value - a.value; });

  var focus = root,
      nodes = pack(root).descendants(),
      view;

  var circle = g.selectAll("circle")
    .data(nodes)
    .enter().append("circle")
      .attr("class", function(d) { return d.parent ? d.children ? "node" : "node node--leaf" : "node node--root"; })
      .style("fill", function(d) { return d.children ? color(d.depth) : null; })
      .on("click", function(d) { if (focus !== d) zoom(d), d3.event.stopPropagation(); });

  var text = g.selectAll("text")
    .data(nodes)
    .enter().append("text")
      .attr("class", "label")
      .style("fill-opacity", function(d) { return d.parent === root ? 1 : 0; })
      .style("display", function(d) { return d.parent === root ? "inline" : "none"; })
      .text(function(d) { return d.data.name; });

  var node = g.selectAll("circle,text");

  svg
      .style("background", color(-1))
      .on("click", function() { zoom(root); });

  zoomTo([root.x, root.y, root.r * 2 + margin]);

    function zoom(d) {
    var focus0 = focus; focus = d;

    var transition = d3.transition()
        .duration(d3.event.altKey ? 7500 : 750)
        .tween("zoom", function(d) {
          var i = d3.interpolateZoom(view, [focus.x, focus.y, focus.r * 2 + margin]);
          return function(t) { zoomTo(i(t)); };
        });

    transition.selectAll("text")
      .filter(function(d) { return d.parent === focus || this.style.display === "inline"; })
        .style("fill-opacity", function(d) { return d.parent === focus ? 1 : 0; })
        .on("start", function(d) { if (d.parent === focus) this.style.display = "inline"; })
        .on("end", function(d) { if (d.parent !== focus) this.style.display = "none"; });
  }

  function zoomTo(v) {
    var k = diameter / v[2]; view = v;
    node.attr("transform", function(d) { return "translate(" + (d.x - v[0]) * k + "," + (d.y - v[1]) * k + ")"; });
    circle.attr("r", function(d) { return d.r * k; });
  }
      


    return resultsSimple
    }
    results = main()
  
</script>
 </div>

</div>
</body>
</html>
